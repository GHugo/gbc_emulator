#ifndef __OPCODES_H__
#define __OPCODES_H__

#include <stdint.h>

#include "memory.h"
#include "emulator.h"

// An opcode function. Take the current machine state and the memory and return
// the number of cycles taken by the instruction.
typedef uint8_t (*opcode_fct)(state*, memory*);

typedef enum {
	// 00
    OPCODE_NOP,
	OPCODE_LDBCnn,
	OPCODE_LDBCmA,
	OPCODE_INCBC,
	OPCODE_INCr_b,
	OPCODE_DECr_b,
	OPCODE_LDrn_b,
	OPCODE_RLCA,
	OPCODE_LDmmSP,
	OPCODE_ADDHLBC,
	OPCODE_LDABCm,
	OPCODE_DECBC,
	OPCODE_INCr_c,
	OPCODE_DECr_c,
	OPCODE_LDrn_c,
	OPCODE_RRCA,
    // 10
	OPCODE_DJNZn,
	OPCODE_LDDEnn,
	OPCODE_LDDEmA,
	OPCODE_INCDE,
	OPCODE_INCr_d,
	OPCODE_DECr_d,
	OPCODE_LDrn_d,
	OPCODE_RLA,
	OPCODE_JRn,
	OPCODE_ADDHLDE,
	OPCODE_LDADEm,
	OPCODE_DECDE,
	OPCODE_INCr_e,
	OPCODE_DECr_e,
	OPCODE_LDrn_e,
	OPCODE_RRA,
    // 20
	OPCODE_JRNZn,
	OPCODE_LDHLnn,
	OPCODE_LDHLIA,
	OPCODE_INCHL,
	OPCODE_INCr_h,
	OPCODE_DECr_h,
	OPCODE_LDrn_h,
	OPCODE_DAA,
	OPCODE_JRZn,
	OPCODE_ADDHLHL,
	OPCODE_LDAHLI,
	OPCODE_DECHL,
	OPCODE_INCr_l,
	OPCODE_DECr_l,
	OPCODE_LDrn_l,
	OPCODE_CPL,
    // 30
	OPCODE_JRNCn,
	OPCODE_LDSPnn,
	OPCODE_LDHLDA,
	OPCODE_INCSP,
	OPCODE_INCHLm,
	OPCODE_DECHLm,
	OPCODE_LDHLmn,
	OPCODE_SCF,
	OPCODE_JRCn,
	OPCODE_ADDHLSP,
	OPCODE_LDAHLD,
	OPCODE_DECSP,
	OPCODE_INCr_a,
	OPCODE_DECr_a,
	OPCODE_LDrn_a,
	OPCODE_CCF,
    // 40
	OPCODE_LDrr_bb,
	OPCODE_LDrr_bc,
	OPCODE_LDrr_bd,
	OPCODE_LDrr_be,
	OPCODE_LDrr_bh,
	OPCODE_LDrr_bl,
	OPCODE_LDrHLm_b,
	OPCODE_LDrr_ba,
	OPCODE_LDrr_cb,
	OPCODE_LDrr_cc,
	OPCODE_LDrr_cd,
	OPCODE_LDrr_ce,
	OPCODE_LDrr_ch,
	OPCODE_LDrr_cl,
	OPCODE_LDrHLm_c,
	OPCODE_LDrr_ca,
    // 50
	OPCODE_LDrr_db,
	OPCODE_LDrr_dc,
	OPCODE_LDrr_dd,
	OPCODE_LDrr_de,
	OPCODE_LDrr_dh,
	OPCODE_LDrr_dl,
	OPCODE_LDrHLm_d,
	OPCODE_LDrr_da,
	OPCODE_LDrr_eb,
	OPCODE_LDrr_ec,
	OPCODE_LDrr_ed,
	OPCODE_LDrr_ee,
	OPCODE_LDrr_eh,
	OPCODE_LDrr_el,
	OPCODE_LDrHLm_e,
	OPCODE_LDrr_ea,
    // 60
	OPCODE_LDrr_hb,
	OPCODE_LDrr_hc,
	OPCODE_LDrr_hd,
	OPCODE_LDrr_he,
	OPCODE_LDrr_hh,
	OPCODE_LDrr_hl,
	OPCODE_LDrHLm_h,
	OPCODE_LDrr_ha,
	OPCODE_LDrr_lb,
	OPCODE_LDrr_lc,
	OPCODE_LDrr_ld,
	OPCODE_LDrr_le,
	OPCODE_LDrr_lh,
	OPCODE_LDrr_ll,
	OPCODE_LDrHLm_l,
	OPCODE_LDrr_la,
    // 70
	OPCODE_LDHLmr_b,
	OPCODE_LDHLmr_c,
	OPCODE_LDHLmr_d,
	OPCODE_LDHLmr_e,
	OPCODE_LDHLmr_h,
	OPCODE_LDHLmr_l,
	OPCODE_HALT,
	OPCODE_LDHLmr_a,
	OPCODE_LDrr_ab,
	OPCODE_LDrr_ac,
	OPCODE_LDrr_ad,
	OPCODE_LDrr_ae,
	OPCODE_LDrr_ah,
	OPCODE_LDrr_al,
	OPCODE_LDrHLm_a,
	OPCODE_LDrr_aa,
    // 80
	OPCODE_ADDr_b,
	OPCODE_ADDr_c,
	OPCODE_ADDr_d,
	OPCODE_ADDr_e,
	OPCODE_ADDr_h,
	OPCODE_ADDr_l,
	OPCODE_ADDHL,
	OPCODE_ADDr_a,
	OPCODE_ADCr_b,
	OPCODE_ADCr_c,
	OPCODE_ADCr_d,
	OPCODE_ADCr_e,
	OPCODE_ADCr_h,
	OPCODE_ADCr_l,
	OPCODE_ADCHL,
	OPCODE_ADCr_a,
    // 90
	OPCODE_SUBr_b,
	OPCODE_SUBr_c,
	OPCODE_SUBr_d,
	OPCODE_SUBr_e,
	OPCODE_SUBr_h,
	OPCODE_SUBr_l,
	OPCODE_SUBHL,
	OPCODE_SUBr_a,
	OPCODE_SBCr_b,
	OPCODE_SBCr_c,
	OPCODE_SBCr_d,
	OPCODE_SBCr_e,
	OPCODE_SBCr_h,
	OPCODE_SBCr_l,
	OPCODE_SBCHL,
	OPCODE_SBCr_a,
    // A0
	OPCODE_ANDr_b,
	OPCODE_ANDr_c,
	OPCODE_ANDr_d,
	OPCODE_ANDr_e,
	OPCODE_ANDr_h,
	OPCODE_ANDr_l,
	OPCODE_ANDHL,
	OPCODE_ANDr_a,
	OPCODE_XORr_b,
	OPCODE_XORr_c,
	OPCODE_XORr_d,
	OPCODE_XORr_e,
	OPCODE_XORr_h,
	OPCODE_XORr_l,
	OPCODE_XORHL,
	OPCODE_XORr_a,
    // B0
	OPCODE_ORr_b,
	OPCODE_ORr_c,
	OPCODE_ORr_d,
	OPCODE_ORr_e,
	OPCODE_ORr_h,
	OPCODE_ORr_l,
	OPCODE_ORHL,
	OPCODE_ORr_a,
	OPCODE_CPr_b,
	OPCODE_CPr_c,
	OPCODE_CPr_d,
	OPCODE_CPr_e,
	OPCODE_CPr_h,
	OPCODE_CPr_l,
	OPCODE_CPHL,
	OPCODE_CPr_a,
    // C0
	OPCODE_RETNZ,
	OPCODE_POPBC,
	OPCODE_JPNZnn,
	OPCODE_JPnn,
	OPCODE_CALLNZnn,
	OPCODE_PUSHBC,
	OPCODE_ADDn,
	OPCODE_RST00,
	OPCODE_RETZ,
	OPCODE_RET,
	OPCODE_JPZnn,
	OPCODE_MAPcb,
	OPCODE_CALLZnn,
	OPCODE_CALLnn,
	OPCODE_ADCn,
	OPCODE_RST08,
    // D0
	OPCODE_RETNC,
	OPCODE_POPDE,
	OPCODE_JPNCnn,
	OPCODE_XX,
	OPCODE_CALLNCnn,
	OPCODE_PUSHDE,
	OPCODE_SUBn,
	OPCODE_RST10,
	OPCODE_RETC,
	OPCODE_RETI,
	OPCODE_JPCnn,
	OPCODE_XX,
	OPCODE_CALLCnn,
	OPCODE_XX,
	OPCODE_SBCn,
	OPCODE_RST18,
    // E0
	OPCODE_LDIOnA,
	OPCODE_POPHL,
	OPCODE_LDIOCA,
	OPCODE_XX,
	OPCODE_XX,
	OPCODE_PUSHHL,
	OPCODE_ANDn,
	OPCODE_RST20,
	OPCODE_ADDSPn,
	OPCODE_JPHL,
	OPCODE_LDmmA,
	OPCODE_XX,
	OPCODE_XX,
	OPCODE_XX,
	OPCODE_XORn,
	OPCODE_RST28,
    // F0
	OPCODE_LDAIOn,
	OPCODE_POPAF,
	OPCODE_LDAIOC,
	OPCODE_DI,
	OPCODE_XX,
	OPCODE_PUSHAF,
	OPCODE_ORn,
	OPCODE_RST30,
	OPCODE_LDHLSPn,
	OPCODE_XX,
	OPCODE_LDAmm,
	OPCODE_EI,
	OPCODE_XX,
	OPCODE_XX,
	OPCODE_CPn,
	OPCODE_RST38
} z80_opcodes;

typedef enum {
    // CB00
    OPCODE_RLCr_b,
	OPCODE_RLCr_c,
	OPCODE_RLCr_d,
	OPCODE_RLCr_e,
	OPCODE_RLCr_h,
	OPCODE_RLCr_l,
	OPCODE_RLCHL,
	OPCODE_RLCr_a,
	OPCODE_RRCr_b,
	OPCODE_RRCr_c,
	OPCODE_RRCr_d,
	OPCODE_RRCr_e,
	OPCODE_RRCr_h,
	OPCODE_RRCr_l,
	OPCODE_RRCHL,
	OPCODE_RRCr_a,
    // CB10
	OPCODE_RLr_b,
	OPCODE_RLr_c,
	OPCODE_RLr_d,
	OPCODE_RLr_e,
	OPCODE_RLr_h,
	OPCODE_RLr_l,
	OPCODE_RLHL,
	OPCODE_RLr_a,
	OPCODE_RRr_b,
	OPCODE_RRr_c,
	OPCODE_RRr_d,
	OPCODE_RRr_e,
	OPCODE_RRr_h,
	OPCODE_RRr_l,
	OPCODE_RRHL,
	OPCODE_RRr_a,
    // CB20
	OPCODE_SLAr_b,
	OPCODE_SLAr_c,
	OPCODE_SLAr_d,
	OPCODE_SLAr_e,
	OPCODE_SLAr_h,
	OPCODE_SLAr_l,
	OPCODE_XX,
	OPCODE_SLAr_a,
	OPCODE_SRAr_b,
	OPCODE_SRAr_c,
	OPCODE_SRAr_d,
	OPCODE_SRAr_e,
	OPCODE_SRAr_h,
	OPCODE_SRAr_l,
	OPCODE_XX,
	OPCODE_SRAr_a,
    // CB30
	OPCODE_SWAPr_b,
	OPCODE_SWAPr_c,
	OPCODE_SWAPr_d,
	OPCODE_SWAPr_e,
	OPCODE_SWAPr_h,
	OPCODE_SWAPr_l,
	OPCODE_XX,
	OPCODE_SWAPr_a,
	OPCODE_SRLr_b,
	OPCODE_SRLr_c,
	OPCODE_SRLr_d,
	OPCODE_SRLr_e,
	OPCODE_SRLr_h,
	OPCODE_SRLr_l,
	OPCODE_XX,
	OPCODE_SRLr_a,
    // CB40
	OPCODE_BIT0b,
	OPCODE_BIT0c,
	OPCODE_BIT0d,
	OPCODE_BIT0e,
	OPCODE_BIT0h,
	OPCODE_BIT0l,
	OPCODE_BIT0m,
	OPCODE_BIT0a,
	OPCODE_BIT1b,
	OPCODE_BIT1c,
	OPCODE_BIT1d,
	OPCODE_BIT1e,
	OPCODE_BIT1h,
	OPCODE_BIT1l,
	OPCODE_BIT1m,
	OPCODE_BIT1a,
    // CB50
	OPCODE_BIT2b,
	OPCODE_BIT2c,
	OPCODE_BIT2d,
	OPCODE_BIT2e,
	OPCODE_BIT2h,
	OPCODE_BIT2l,
	OPCODE_BIT2m,
	OPCODE_BIT2a,
	OPCODE_BIT3b,
	OPCODE_BIT3c,
	OPCODE_BIT3d,
	OPCODE_BIT3e,
	OPCODE_BIT3h,
	OPCODE_BIT3l,
	OPCODE_BIT3m,
	OPCODE_BIT3a,
    // CB60
	OPCODE_BIT4b,
	OPCODE_BIT4c,
	OPCODE_BIT4d,
	OPCODE_BIT4e,
	OPCODE_BIT4h,
	OPCODE_BIT4l,
	OPCODE_BIT4m,
	OPCODE_BIT4a,
	OPCODE_BIT5b,
	OPCODE_BIT5c,
	OPCODE_BIT5d,
	OPCODE_BIT5e,
	OPCODE_BIT5h,
	OPCODE_BIT5l,
	OPCODE_BIT5m,
	OPCODE_BIT5a,
    // CB70
	OPCODE_BIT6b,
	OPCODE_BIT6c,
	OPCODE_BIT6d,
	OPCODE_BIT6e,
	OPCODE_BIT6h,
	OPCODE_BIT6l,
	OPCODE_BIT6m,
	OPCODE_BIT6a,
	OPCODE_BIT7b,
	OPCODE_BIT7c,
	OPCODE_BIT7d,
	OPCODE_BIT7e,
	OPCODE_BIT7h,
	OPCODE_BIT7l,
	OPCODE_BIT7m,
	OPCODE_BIT7a,
    // CB80
	OPCODE_RES0b,
	OPCODE_RES0c,
	OPCODE_RES0d,
	OPCODE_RES0e,
	OPCODE_RES0h,
	OPCODE_RES0l,
	OPCODE_RES0m,
	OPCODE_RES0a,
	OPCODE_RES1b,
	OPCODE_RES1c,
	OPCODE_RES1d,
	OPCODE_RES1e,
	OPCODE_RES1h,
	OPCODE_RES1l,
	OPCODE_RES1m,
	OPCODE_RES1a,
    // CB90
	OPCODE_RES2b,
	OPCODE_RES2c,
	OPCODE_RES2d,
	OPCODE_RES2e,
	OPCODE_RES2h,
	OPCODE_RES2l,
	OPCODE_RES2m,
	OPCODE_RES2a,
	OPCODE_RES3b,
	OPCODE_RES3c,
	OPCODE_RES3d,
	OPCODE_RES3e,
	OPCODE_RES3h,
	OPCODE_RES3l,
	OPCODE_RES3m,
	OPCODE_RES3a,
    // CBA0
	OPCODE_RES4b,
	OPCODE_RES4c,
	OPCODE_RES4d,
	OPCODE_RES4e,
	OPCODE_RES4h,
	OPCODE_RES4l,
	OPCODE_RES4m,
	OPCODE_RES4a,
	OPCODE_RES5b,
	OPCODE_RES5c,
	OPCODE_RES5d,
	OPCODE_RES5e,
	OPCODE_RES5h,
	OPCODE_RES5l,
	OPCODE_RES5m,
	OPCODE_RES5a,
    // CBB0
	OPCODE_RES6b,
	OPCODE_RES6c,
	OPCODE_RES6d,
	OPCODE_RES6e,
	OPCODE_RES6h,
	OPCODE_RES6l,
	OPCODE_RES6m,
	OPCODE_RES6a,
	OPCODE_RES7b,
	OPCODE_RES7c,
	OPCODE_RES7d,
	OPCODE_RES7e,
	OPCODE_RES7h,
	OPCODE_RES7l,
	OPCODE_RES7m,
	OPCODE_RES7a,
    // CBC0
	OPCODE_SET0b,
	OPCODE_SET0c,
	OPCODE_SET0d,
	OPCODE_SET0e,
	OPCODE_SET0h,
	OPCODE_SET0l,
	OPCODE_SET0m,
	OPCODE_SET0a,
	OPCODE_SET1b,
	OPCODE_SET1c,
	OPCODE_SET1d,
	OPCODE_SET1e,
	OPCODE_SET1h,
	OPCODE_SET1l,
	OPCODE_SET1m,
	OPCODE_SET1a,
    // CBD0
	OPCODE_SET2b,
	OPCODE_SET2c,
	OPCODE_SET2d,
	OPCODE_SET2e,
	OPCODE_SET2h,
	OPCODE_SET2l,
	OPCODE_SET2m,
	OPCODE_SET2a,
	OPCODE_SET3b,
	OPCODE_SET3c,
	OPCODE_SET3d,
	OPCODE_SET3e,
	OPCODE_SET3h,
	OPCODE_SET3l,
	OPCODE_SET3m,
	OPCODE_SET3a,
    // CBE0
	OPCODE_SET4b,
	OPCODE_SET4c,
	OPCODE_SET4d,
	OPCODE_SET4e,
	OPCODE_SET4h,
	OPCODE_SET4l,
	OPCODE_SET4m,
	OPCODE_SET4a,
	OPCODE_SET5b,
	OPCODE_SET5c,
	OPCODE_SET5d,
	OPCODE_SET5e,
	OPCODE_SET5h,
	OPCODE_SET5l,
	OPCODE_SET5m,
	OPCODE_SET5a,
    // CBF0
	OPCODE_SET6b,
	OPCODE_SET6c,
	OPCODE_SET6d,
	OPCODE_SET6e,
	OPCODE_SET6h,
	OPCODE_SET6l,
	OPCODE_SET6m,
	OPCODE_SET6a,
	OPCODE_SET7b,
	OPCODE_SET7c,
	OPCODE_SET7d,
	OPCODE_SET7e,
	OPCODE_SET7h,
	OPCODE_SET7l,
	OPCODE_SET7m,
	OPCODE_SET7a
} z80_opcodes_extra;

#define MAX_OPCODES (OPCODE_RST38+1)
#define MAX_OPCODES_EXTRA (OPCODE_SET7a+1)

void opcodes_init();
uint8_t opcodes_execute(z80_opcodes *opcode, state* st, memory* mem);
#endif     // __OPCODES_H__
